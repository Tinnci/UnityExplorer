---
description: 
globs: *.cs
alwaysApply: false
---
## 国际化 (i18n) 实施指南

本项目正在实施国际化支持。请遵循以下原则和步骤来添加和管理本地化文本：

1.  **文本提取：** 将所有硬编码在 UI 或代码中的面向用户的文本（如按钮文本、标签、提示信息、控制台帮助信息等）提取出来。
2.  **文本资源管理：**
    *   为每种支持的语言创建独立的资源文件（建议使用 JSON、XML 或 Unity TextAsset/ScriptableObject）。
    *   在资源文件中，使用有意义的、结构化的唯一键来标识每段文本，例如 `PanelName_ElementName_Property`。
    *   将提取的文本及其对应语言的翻译存储在这些资源文件中。
3.  **本地化管理器：**
    *   核心是实现一个 `LocalizationManager` 类（最好是单例）。
    *   `LocalizationManager` 负责加载选定语言的资源文件。
    *   提供一个公共方法（例如 `GetString(string key)`），根据给定的键和当前语言设置返回对应的本地化字符串。
    *   实现语言切换逻辑，并在语言切换时通知需要更新 UI 文本的组件。
4.  **替换硬编码文本：**
    *   在所有创建或修改 UI 元素文本的地方，将硬编码的字符串替换为调用 `LocalizationManager.GetString(key)` 方法来获取文本。
    *   对于包含动态内容的文本，使用字符串格式化方法（如 `string.Format`）结合本地化字符串模板。
5.  **UI 动态更新：**
    *   实现机制确保当用户切换语言时，所有当前可见的 UI 元素的文本能够及时更新。
    *   可以考虑使用事件订阅/发布模式，或在 UI 组件激活时获取最新文本。
6.  **字体支持：** 确保项目中使用的字体支持所有目标语言所需的字符集。

---

